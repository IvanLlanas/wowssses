# ----------------------------------------------------------------------
# Ivan Llanas Aliases System
# ----------------------------------------------------------------------
# Internal constants start with '_'.
# Internal functions start with '___'.
# ----------------------------------------------------------------------

_product_name="Ivan Llanas Aliases System"
_product_version="2.2"
_product_build="103"

_ansi_off="\e[0m"
_ansi_bold="\e[1m"

_ansi_gray="\e[37m"
_ansi_green="\e[32m"

_ansi_lblack="\e[90m"
_ansi_lgreen="\e[92m"
_ansi_lyellow="\e[93m"
_ansi_lcyan="\e[96m"
_ansi_lwhite="\e[97m"

_ansi_bg_default="\e[49m"
_ansi_bg_red="\e[41m"
_ansi_bg_blue="\e[44m"

_bold1='<b>'
_bold0='</b>'

_quote1="<"
_quote2=">"
_quotel1="["
_quotel2="]"

_error_n=$_ansi_lwhite
_error_b=$_ansi_lyellow
_error_bg=$_ansi_bg_red
_info_n=$_ansi_lwhite
_info_b=$_ansi_lyellow
_info_bg=$_ansi_bg_default
_infoline_n=$_ansi_lwhite
_infoline_b=$_ansi_lcyan
_infoline_bg=$_ansi_bg_blue
_skip_n=$_ansi_green
_skip_b=$_ansi_lgreen
_skip_bg=$_ansi_bg_default

_find_trash_color="light:red"
_find_home_color="light:cyan"

#export LC_ALL="C" # Breaks unicode characters!
export LS_COLORS=""
# Backup IFS to restore it whenever is changed.
_IFS0=$IFS

# Aliases support functions --------------------------------------------
function ___cmd_descr ()
{
   local b1='\e[1m'
   local b0='\e[0m'

   echo -e " "$b1$1$b0" - "$2$b0
}

function ___cmd_usage ()
{
   local bg1='\e[47m'
   local b1='\e[0;30m'
   local b0='\e[0m'

   echo -e " Usage: "$b1$bg1 $1 $b0
}

function ___print_error ()
{
   local command=$1
   local text=$2

   text=${text//$_bold1/$_error_b}
   text=${text//$_bold0/$_error_n}

   echo -e "$_error_b$_error_bg $command$_error_n: $text $_ansi_off"
}

function ___print_info_line ()
{
   local text=$1

   text=${text//$_bold1/$_infoline_b}
   text=${text//$_bold0/$_infoline_n}

   echo -e "$_ansi_bold$_infoline_n$_infoline_bg $_quotel1 $text $_quotel2 $_ansi_off"
}

function ___print_skip ()
{
   local text=$1

   text=${text//$_bold1/$_skip_b}
   text=${text//$_bold0/$_skip_n}

   echo -e "$_skip_n$_skip_bg $text $_ansi_off"
}

function ___print_info ()
{
   local text=$1

   text=${text//$_bold1/$_info_b}
   text=${text//$_bold0/$_info_n}

   echo -e "$_info_n$_info_bg $text $_ansi_off"
}

function ___print_info_start ()
{
   local text=$1

   text=${text//$_bold1/$_info_b}
   text=${text//$_bold0/$_info_n}

   echo -en "$_info_n$_info_bg $text"
}

function ___print_info_mid ()
{
   local text=$1

   text=${text//$_bold1/$_info_b}
   text=${text//$_bold0/$_info_n}

   echo -en "$_info_n$_info_bg$text"
}

function ___print_info_end ()
{
   local text=$1

   text=${text//$_bold1/$_info_b}
   text=${text//$_bold0/$_info_n}

   echo -e "$_info_n$_info_bg$text$_ansi_off"
}

function ___trim ()
{
   local s=$1

   # Turn on the extglob shell option
   shopt -s extglob
   ## Trim leading whitespaces
   s="${s##*( )}"
   ## Trim trailing whitespaces
   s="${s%%*( )}"
   # 5. Print final result
   echo $s
   # Turn off the extglob shell option
   shopt -u extglob
}

# ----------------------------------------------------------------------
___print_info_line "<b>$_product_name $_ansi_lyellow$_product_version</b> ($_ansi_lyellow$_product_build</b>) loading..."
# ----------------------------------------------------------------------

# Is bline installed?
if test -f "/bin/bline"; then
   _BLINE=true
   ___print_info "Using <b>bline</b>."
else
   _BLINE=false
   ___print_skip "<b>bline</b> not found."
fi

# Common aliases
alias eal="q ~/.bash_aliases"
   eal_description="Edit aliases."
alias ral="unalias -a && source ~/.bash_aliases"
   ral_description="Re-read aliases."
alias ..="cd .."
   ___description="Move to parent directory."
alias ...="cd ../.."
   ____description="Move two directories above."
alias ....="cd ../../.."
   _____description="Move three directories above."
alias .....="cd ../../../.."
   ______description="Move four directories above."
alias ......="cd ../../../../.."
   _______description="Move five directories above."
alias md=mkdir
   md_description="Create a directory."
alias rd=rmdir
   rd_description="Delete an empty directory."
alias mk="_mk"
   mk_description="Create a directory an enter."
function _mk ()
{
   mkdir "$1"
   cd "$1"
}
alias x="exit"
   x_description="Exit shell."
alias c="clear"
   c_description="Clear console."
alias d="eza --group-directories-first --header --time-style=\"+%Y.%m.%d %H:%M\" -l"
   d_description="Directory listing, full information."
alias da="d -a"
   da_description="Directory listing, full information, all files."
alias dg="d --git"
   dg_description="Directory listing, full information, git status."
alias l="less"
   l_description="Less."

alias start="xdg-open"
   start_description="Launch file with the default application."
alias fm="start ."
   fm_description="Start a file manager in the current directory."
alias bk="rm *.bak"
   bk_description="Delete bak files."
alias ra="rar a -r -s -m5 -md1g"
   ra_description="Compress using rar with maximum compression settings."
alias rl="rar l"
   rl_description="List rar archive contents."
alias rx="rar x"
   rx_description="Extract archive contents."
alias 7za="7z a -t7z -mx=9"
   _7za_description="Compress using 7z with maximum compression settings."
alias supdate="sudo apt update && apt list --upgradable"
   supdate_description="Check packages to update."
alias supgrade="sudo apt upgrade -y"
   supgrade_description="Update the current packages."
alias sysupdate="supdate && supgrade"
   sysupdate_description="Update everything. No questions."
alias clearhistory="cat /dev/null > ~/.bash_history && history -c"
   clearhistory_description="Delete the shell history from memory and disk."
alias bat="upower -i /org/freedesktop/UPower/devices/battery_BAT0"
   bat_description="Show battery status."
alias fstab="sudo nano /etc/fstab"
   fstab_description="Edit /etc/fstab using nano."

if $_BLINE ; then
   alias mnt="mount | awk -F' ' '{ printf \"%s\t%s\n\",\$1,\$3; }' | column -t | egrep ^/dev/ | sort | bline -m $HOME $_find_home_color"
else
   alias mnt="mount | awk -F' ' '{ printf \"%s\t%s\n\",\$1,\$3; }' | column -t | egrep ^/dev/ | sort"
fi

   mnt_description="Show device mounts."
alias mnts="mount | awk -F' ' '{ printf \"%s\t%s\n\",\$1,\$3; }' | column -t | egrep ^/var/ | sort"
   mnts_description="Show snap mounts."

alias logout="gnome-session-quit --no-prompt"
   logout_description="Logout desktop session (no confirmation!)."

# Add an "alert" alias for long running commands.  Use like so:
#   sleep 10; alert
# and in 10sec an alert will popup into Gnome alerts (calendar button).
alias alert='notify-send --urgency=low -i "$([ $? = 0 ] && echo terminal || echo error)" "$(history|tail -n1|sed -e '\''s/^\s*[0-9]\+\s*//;s/[;&|]\s*alert$//'\'')"'
   alert_description="Add an alert to Gnome alerts (calendar button)."

alias fn="realpath \$1"
   fn_description="Print the full path of a given file/directory."

# Saved from original .bashrc
alias grep="grep --color=auto"
   grep_description="grep using colors."
alias egrep="egrep --color=auto"
   egrep_description="egrep using colors."
alias fgrep="fgrep --color=auto"
   fgrep_description="fgrep using colors."

# Apps ----------------------------------------------------------
if test -f "/bin/cmatrix"; then
   alias matrix="gnome-terminal --window-with-profile=Matrix --full-screen -- cmatrix -b"
      matrix_description="Start full Matrix screensaver."
   # kmatrix - Mind the single quote!
   alias kmatrix='kill $(pidof cmatrix)'
      kmatrix_description="Kill Matrix screensaver (if Q does not quit)."
   ___print_info "<b>cmatrix</b> aliases added."
fi

if test -f "/bin/xclip-cutfile"; then
   alias xc=xclip-copyfile
      xc_description="Copy file(s) to the clipboard (only to console!)."
   alias xx=xclip-cutfile
      xx_description="Cut file(s) to the clipboard (only to console!)."
   alias xv=xclip-pastefile
      xv_description="Paste file(s) from the clipboard (only from console!)."
   ___print_info "<b>xclip</b> aliases added."
else
   ___print_skip "<b>xclip</b> not found."
fi

if test -f "$HOME/doom/ports/gzdoom/current/gzdoom"; then
   GZDOOMDIR="$HOME/doom/ports/gzdoom/current"
   alias doom="$GZDOOMDIR/gzdoom -config $GZDOOMDIR/gzdoom.ini -file"
      doom_description="Launch GZDoom with \"portable\" settings file."
   alias doomz="doom xs.pk3 bfriend1.pk3 levelinfo.pk3"
      doomz_description="Launch GZDoom with \"portable\" settings file and XS wad(s)."
   ___print_info "<b>GZDoom</b> aliases added."
else
   ___print_skip "<b>GZDoom</b> not found."
fi

if test -f "$HOME/wowsss/wowsss/wowsss.sh"; then
   alias wow="$HOME/wowsss/start.sh"
      wow_description="Launch WoWSSS."
   echo "<b>WoWSSS</b> aliases added."
else
   ___print_skip "<b>WoWSSS</b> not found."
fi

if test -f "/bin/xclip-cutfile"; then
   if test -f "$HOME/.config/ivan/git-token.txt"; then
      alias cgtk="xclip -sel clip $HOME/.config/ivan/git-token.txt && echo Token copied to the clipboard."
         cgtk_description="Copies the github security token to the clipboard."
      ___print_info "<b>Git token</b> aliases added."
   else
      ___print_skip "<b>Git token</b> file not found."
   fi
else
   ___print_skip "<b>Git token</b>: <b>xclip</b> not found."
fi

# Debian --------------------------------------------------------
function ___debian_aliases ()
{
   local os_is_ubuntu=0
   local os_is_debian=0
   local osname;

   # Let's check which distro is in use.
   if type lsb_release >/dev/null 2>&1; then
      local osname=$(lsb_release -si)
      case $osname in
        *"Ubuntu"*) os_is_ubuntu=1;;
        *"Debian"*) os_is_debian=1;;
        *"mint"*)   os_is_ubuntu=1;;
        *) ___print_error "___debian_aliases" "Unknown linux version [<b>$osname</b>].";;
      esac
   fi
   if [ $os_is_debian -gt 0 ]; then
      alias poweroff="sudo systemctl poweroff"
         poweroff_description="Poweroff system (like Ubuntu)."
      alias reboot="sudo systemctl reboot"
         reboot_description="Reboot system (like Ubuntu)."
      ___print_info "<b>Debian power</b> aliases added."
   fi
}
___debian_aliases

# CC ------------------------------------------------------------
_save_all_script="$HOME/Scripts/sh/$HOSTNAME-save-all.sh"
if test -f "$_save_all_script"; then
   alias saveall="$_save_all_script"
      saveall_description="Make a backup of all meaningful configurations."
   ___print_info "<b>Backup script</b> found."
else
   ___print_skip "<b>Backup script</b> not found $_quote1$_save_all_script$_quote2."
fi

# INAS ----------------------------------------------------------
if test -f "/etc/samba/smb.conf"; then
   alias smbed="sudo nano /etc/samba/smb.conf"
      smbed_description="Edit samba configuration file."
   alias smbcheck="sudo systemctl status smbd"
      smbcheck_description="Show samba service status."
   alias smbrestart="sudo service smbd restart"
      smbrestart_description="Restart samba service."
   ___print_info "<b>Samba</b> aliases added."
else
   ___print_skip "<b>Samba</b> not found."
fi

# ---------------------------------------------------------------
fr_description="Show memory and disk usage."
if test -d "/shared/videoteca"; then
      alias fr="echo && free -h && echo && df -h / /shared/videoteca /shared/filter && echo"
      ___print_info "<b>INAS-fr</b> alias added."
else
   if [ $HOSTNAME = "cc" ]; then
      alias fr="echo && free -h && echo && df -h / $HOME/Dropbox $HOME/VM $HOME/store && echo"
      ___print_info "<b>CC-fr</b> alias added."
   else
      alias fr="echo && free -h && echo && df -h / && echo"
      ___print_info "<b>Base-fr</b> alias added."
   fi
fi

# Mistakes ------------------------------------------------------
alias car=cat
   car_description="cat (correction)."
alias cay=cat
   cay_description=$car_description

# ---------------------------------------------------------------
# Big aliases ---------------------------------------------------
# ---------------------------------------------------------------

# Editors -------------------------------------------------------
function ___editors_aliases ()
{
   local editors_name=(  "kate"          "geany"          "tilde"          "nano"          )
   local editors_file=(  "/bin/kate"     "/bin/geany"     "/bin/tilde"     "/bin/nano"     )
   local editors_alias=( "___kate"       "geany"          "tilde"          "nano"          )
   local editors_pref=(  "Preferred"     "Alternative"    "Console"        "Console"       )

   local i n num num2 q_index variable

   i=0
   n=${#editors_name[@]}
   q_index=1

   ___print_info_start "Q-Editors: "
   for (( i=0 ; i<$n ; i++ ));
   do
      if test -f "${editors_file[$i]}"; then
         if [ $q_index -eq 1 ]; then
            num=""
         else
            num=$q_index
            ___print_info_mid ", "
         fi
         ___print_info_mid "$_bold1"${editors_name[$i]}$_bold0"($q_index)"

         alias "q$num"="${editors_alias[$i]}"
         variable=q$num"_description"
         let num2=q_index-1
         eval ${variable}=${editors_pref[$num2]}"\ text\ editor\ \("${editors_name[$i]}"\)."
         let q_index++
      fi
   done
   ___print_info_end "."
}
___editors_aliases

function ___kate()
{
   local pid=$(pidof kate)
   if [ "$pid" == "" ]; then
      kate
      sleep 0.8
   fi
   # We don't want to see console messages anytime...
   kate "$@" > /dev/null &
}
alias sq="sudo nano"
   sq_description="sudo nano."

alias fh="___fh"
   fh_description="Find in history."
function ___fh ()
{
   if [ $# -lt 1 ]; then
      ___cmd_descr "fh" "$fh_description"
      ___cmd_usage "fh text"
   else
      history|grep $1
   fi
}

alias fp="___fp"
   fp_description="Find pid of a given process name."
function ___fp ()
{
   if [ $# -lt 1 ]; then
      ___cmd_descr "fp" "$fp_description"
      ___cmd_usage "fp name/fragment"
   else
      pgrep -ia $1
   fi
}

alias ver=___os_version
   ver_description="Show OS version information."
function ___os_version ()
{
   if type lsb_release >/dev/null 2>&1; then
      # Get OS info from lsb_release
      local os_name os_version os_codename gdm_name
      os_name=$(lsb_release -si)
      os_version=$(lsb_release -sr)
      os_codename=$(lsb_release -sc)
      gdm_name=$XDG_CURRENT_DESKTOP
      ___print_info "<b>$USER</b>[<b>$UID</b>]@<b>$HOSTNAME</b>"
      ___print_info "$os_name $os_version ($os_codename) [$(uname):$OSTYPE] Kernel: $(uname -r)"
      ___print_info  "<b>$XDG_SESSION_TYPE</b> (<b>$XDG_SESSION_DESKTOP</b>) session on $gdm_name"

      if [[ $gdm_name == *"GNOME"* ]]; then
         gnome-shell --version | sed 's/^/ /'
      fi
      if [[ $gdm_name == *"KDE"* ]]; then
         plasmashell  --version | sed 's/^/ /'
         kf5-config --version | sed 's/^/ /'
      fi
   else
      ___print_info "Unknown OS version."
   fi
}

alias ft=___ft
   ft_description="Find text inside files (ignore case, recursive and line numbers)."
function ___ft ()
{
   if [ $# -lt 1 ]; then
      ___cmd_descr "ft" "$ft_description"
      ___cmd_usage "ft text [path=.]"
   else
      local text=$1
      local path=$2
      if [ $# -lt 2 ]; then
         path="."
      fi
      path=$(realpath "$path")
      if $_BLINE ; then
         grep -rni "$text" "$path" | bline -m .Trash-1000 $_find_trash_color | bline -m $HOME $_find_home_color
      else
         grep -rni "$text" "$path"
      fi
   fi
}

alias ff=___ff
   ff_description="Find files."
function ___ff ()
{
   if [ $# -lt 1 ]; then
      ___cmd_descr "ff" "$ff_description"
      ___cmd_usage "ff name-pattern [path=.]"
   else
      local pattern=$1
      local path=$2
      if [ $# -lt 2 ]; then
         path="."
      fi
      path=$(realpath "$path")
      if $_BLINE ; then
         find "$path" -name "$pattern" 2>/dev/null | bline -m .Trash-1000 $_find_trash_color | bline -m $HOME $_find_home_color
      else
         find "$path" -name "$pattern" 2>/dev/null
      fi
   fi
}

alias pdu=___pdu
   pdu_description="Progressive disk usage."
function ___pdu ()
{
   local size0=
   local size1=
   local size=
   local update=$3
   if [ "$update" == "" ]; then
      update=2
   fi

   local path=$1
   if [ "$path" == "" ]; then
      ___cmd_descr "pdu" "$pdu_description"
      ___cmd_usage "pdu path [-m/-b] [seconds update]"
      return
   fi
   path=$(realpath "$path")

   local mode=$2
   if [ "$mode" == "" ]; then
      mode="-m"
   fi

   echo Progressive disk usage in \"$path\" "($update seconds update)":
   # du "$path" -s "$mode"
   read size0 _ < <(du "$path" "-s" "$mode" 2> /dev/null)

   while true ; do
      read size1 _ < <(du "$path" "-s" "$mode" 2> /dev/null)
      let size=size1-size0
      printf "\r   %'.3d / %'.3d " $size $size0
      sleep $update
   done
}

alias count=___count_files
   count_description="Count the amount of files and directories recursively in a given path."
function ___count_files ()
{
   if [ $# -lt 1 ]; then
      ___cmd_descr "count" "$count_description"
      ___cmd_usage "count path=."
   else
      local path=$1
      local d=
      local f=
      if [ $# -lt 2 ]; then
         path="."
      fi
      d=$(find $path -type d 2>/dev/null | wc -l)
      f=$(find $path -type f 2>/dev/null | wc -l)
      # numfmt --grouping $n
      printf " %'.3d files and %'.3d directories in \"%s\".\n" $f $d $(realpath $path)
   fi
}

alias chm=___chm
   chm_description="Change file permissions recursively."
alias chmn="chm 644"
   chmn_description="Change file permissions to 664 recursively."
function ___chm ()
{
   if [ $# -lt 1 ]; then
      ___cmd_descr "chm" "$chm_description"
      ___cmd_usage "chm value [path=.]"
   else
      local value=$1
      local path=$2
      if [ $# -lt 2 ]; then
         path="."
      fi
      find "$path" -type f -exec chmod $value -- {} +
   fi
}

alias go=___go_dir
   go_description="cd shortcuts by ID."
___go_dirs=("gz    :~/doom/ports/gzdoom/current" \
            "wad   :~/doom/wads" \
            "docs  :~/Dropbox/Documents" \
            "save  :~/Dropbox/Apps/Games/_savegames/Active" \
            "web   :~/Dropbox/Web" \
            "vm    :~/VM" \
            "dw    :~/Downloads" \
            "shared:~/VM/_shared" \
            "wow   :~/Scripts/wowssses" \
            "sh    :~/Scripts/sh" \
            "ivan  :~/.config/ivan" \
            "eza   :~/.config/eza" \
            "geany :~/.config/geany" \
            "xnview:~/.config/xnviewmp" \
            "conky :~/.config/conky" \
           )
function ___go_dir ()
{
   local id0 n i s id dir c1 c2

   id0=$1
   n=${#___go_dirs[@]}
   c1="\e[1m"
   c2="\e[0m"

   if [ $# -lt 1 ]; then
      ___cmd_descr "go" "$go_description"
      ___cmd_usage "go dir-id"
      for (( i=0 ; i<$n ; i++ ));
      do
         s=${___go_dirs[$i]}
         IFS=":"
            set $s
            id=$(___trim $1)
            dir=$2
         IFS=$_IFS0

         printf "       go "
         echo -e -n $c1
         printf %-10s $id
         echo -e -n $c2
         printf "= cd %s\n" $dir
#        printf "       go %-10s= cd %s\n" $id $dir
      done
   else
      for (( i=0 ; i<$n ; i++ ));
      do
         s=${___go_dirs[$i]}
         IFS=":"
            set $s
            id=$(___trim $1)
            dir=$2
         IFS=$_IFS0
         if [ "$id" = "$id0" ]; then
            cd "${dir/\~/$HOME}"
            return
         fi
      done
      ___print_error "go" "dir-id $_quote1<b>$id0</b>$_quote2 not found."
   fi
}

function ___complete_go ()
{
   local i n opts cur opts

   COMPREPLY=()
   cur="${COMP_WORDS[COMP_CWORD]}"

   opts=""

  n=${#___go_dirs[@]}
   for (( i=0 ; i<$n ; i++ ));
   do
      s=${___go_dirs[$i]}
      IFS=":"
         set $s
         id=$(___trim $1)
      IFS=$_IFS0
      opts="$opts $id"
   done

   COMPREPLY=( $(compgen -W "${opts}" -- ${cur}) )
   return 0
}
complete -F ___complete_go go

alias desktop_link=_desktop_link
   desktop_link_description="Create an absolute symbolic link in the desktop to the specified file."
function _desktop_link ()
{
   if [ $# -lt 2 ]; then
      ___cmd_descr "desktop_link" "$desktop_link_description"
      ___cmd_usage "desktop_link source-file destination-link"
   else
      local source=$1
      local dest=$2
      ln -s "$(realpath "$source")" "$HOME/Desktop/$dest"
   fi
}

alias all=_list_aliases
   all_description="Show a list of aliases".
function _list_aliases ()
{
   local aliases desc width2 i cmd cr

   aliases=$(compgen -a)
   desc=0
   i=1
   cr=0

   let width2=$COLUMNS-3
   let n=width2/16

   if [[ $1 != "" ]]; then
      cmd=$1
      if [ "$cmd" != "?" ]; then
         local cmdv=${BASH_ALIASES[$cmd]}
         if [ "$cmdv" = "" ]; then
            ___print_error "all" "Unknown alias $_quote1<b>$cmd$_quote2</b>."
         else
            ___print_alias 1 0 $cmd
            return
         fi
      fi
      desc=1
   fi

   if [ $desc -eq 0 ]; then
      printf "   "
   fi

   while IFS= read -r cmd ; do

      ___print_alias $desc 1 $cmd

      cr=0
      if [ $desc = 0 ]; then
         let i=i+1
         if [ $i -ge $n ]; then
            printf "\n   "
            i=1
            cr=1
         fi
       fi

   done <<< "$aliases"

   if [ $desc -eq 0 ] && [ $cr -eq 0 ]; then
      echo
   fi
   echo
}

function ___print_alias ()
{
   local desc indent cmd value suf varname c1 c2

   desc=$1
   indent=$2
   cmd=$3

   value=${BASH_ALIASES[$cmd]}
   if [[ $value == *"sudo "* ]]; then
      suf="*"
      c1="\e[93m"
      c2="\e[0m"
   else
      suf=""
      c1=
      c2=
   fi

   if [ $desc -gt 0 ]; then
      printf "   "
      echo -e -n $c1
      if [ $indent -gt 0 ]; then
         printf %-16s $cmd$suf
      else
         printf %s $cmd$suf
      fi
      echo -e -n $c2

      varname=${cmd//\./_}"_description"
      if [[ -v $varname ]]; then
         description=${!varname}
      else
         varname="_"$varname
         if [[ -v $varname ]]; then
            description=${!varname}
         else
            description="?"
         fi
      fi
      echo " - $description"
   else
      echo -e -n $c1
      printf %-16s $cmd$suf
      echo -e -n $c2
   fi
}

function ___complete_all ()
{
   local cur opts

   # get all the aliases names
   opts=$(compgen -a)
   opts="? "${opts//$'\r'}

   COMPREPLY=()
   cur="${COMP_WORDS[COMP_CWORD]}"
   #prev="${COMP_WORDS[COMP_CWORD-1]}"

   COMPREPLY=( $(compgen -W "${opts}" -- ${cur}) )
   return 0
}

# Autocompletion in aliases!
# Google: ubuntu add autocompletion in aliases
# https://askubuntu.com/questions/652776/how-to-get-tab-to-work-with-arguments-of-aliases-to-autocomplete-as-can-be-don
# https://unix.stackexchange.com/questions/4219/how-do-i-get-bash-completion-for-command-aliases

# `all` <tab> <tab> would show autocomplete above wordlist
complete -F ___complete_all all
# [Verification needed] If you want simplest wordlist, use below instead:
# complete -W "help verbose version" all

# ----------------------------------------------------------------------
___print_info_line "<b>$_product_name $_ansi_lyellow$_product_version</b> ($_ansi_lyellow$_product_build</b>) loaded."
# ----------------------------------------------------------------------

# ----------------------------------------------------------------------
# Change color of command console output.
# $ command | pretty
# pretty ()
# {
#     while read -r line; do
#         printf "\033[38;5;%dm%s\033[0m\n" $(($RANDOM%255)) "$line";
#     done
# }
# ----------------------------------------------------------------------
# System installation:
# stat / | awk '/Birth: /{print $2 " " substr($3,1,5)}'
#
